<!-- Original AI Suggestion Content (commented out) -->
<!--
<section class="ai-suggestion">
  <header>
    <h2>AI Recommendation</h2>
  </header>

  <div class="ai-content">
    <div class="recommended-price">
      <h3>Suggested Target Price</h3>
      <p class="price-value">‚Ç¨<%= suggestion[:recommended_target] %></p>
    </div>

    <div class="confidence-score">
      <h4>AI Confidence Level</h4>
      <p class="confidence-value">
        <%= (suggestion[:confidence_score] * 100).to_i %>% confident
      </p>

      <div class="confidence-bar">
        <% confidence_percentage = (suggestion[:confidence_score] * 100).to_i %>
        <% if confidence_percentage >= 80 %>
          <span class="confidence-high">‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† High Confidence</span>
        <% elsif confidence_percentage >= 60 %>
          <span class="confidence-medium">‚ñ†‚ñ†‚ñ†‚ñ°‚ñ° Medium Confidence</span>
        <% else %>
          <span class="confidence-low">‚ñ†‚ñ†‚ñ°‚ñ°‚ñ° Low Confidence</span>
        <% end %>
      </div>
    </div>

    <div class="ai-reasoning">
      <h4>Why this target?</h4>
      <p><%= suggestion[:reasoning] %></p>
    </div>

    <div class="ai-hint">
      <p><em>üí° Tip: You can adjust this target in the form below based on your business needs.</em></p>
    </div>
  </div>
</section>
-->

<!-- New AI Market Intelligence Dashboard -->
<section class="ai-dashboard" style="background: #131B3F; border-radius: 0.5rem; padding: 2rem; color: #E5E4E2;">
  <header style="margin-bottom: 2rem; border-bottom: 2px solid #FF7518; padding-bottom: 1rem;">
    <h2 style="color: #E5E4E2; margin: 0; font-size: 1.5rem; font-weight: 700;">
      <span style="padding-right: 24px;">ü§ñ</span>AI Market Intelligence
    </h2>
  </header>

  <!-- AI Recommendation - Moved to top -->
  <div class="ai-recommendation" id="ai-recommendation-section" style="background: #0A0F2E; padding: 1.5rem; border-radius: 0.375rem; border: 1px solid #FF7518; border-left: 4px solid #FF7518; margin-bottom: 2rem;">
    <%# Turbo Stream subscription commented out - using AJAX polling instead %>
    <%#= turbo_stream_from "ai_recommendation_#{@renegotiation.id}" %>
    <h4 style="color: #FF7518; margin: 0 0 1rem 0; font-size: 1rem; font-weight: 600;">üí° AI Recommendation</h4>

    <!-- Loading State -->
    <div id="ai-loading" style="display: block;">
      <div class="d-flex align-items-center" style="color: #E5E4E2;">
        <div class="spinner-border spinner-border-sm text-warning me-2" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mb-0">Analyzing product composition and market conditions...</p>
      </div>
    </div>

    <!-- Content will be loaded here via AJAX -->
    <div id="ai-content" style="display: none;">
      <p id="ai-recommendation-text" style="color: #E5E4E2; margin: 0; line-height: 1.6;">
        <!-- Dynamic content will be inserted here -->
      </p>
    </div>

    <!-- Real AJAX Implementation -->
    <script>
      // Use single event listener to avoid conflicts
      document.addEventListener('turbo:load', initializeAI);

      function initializeAI() {
        // Prevent double initialization
        if (window.aiIntelligenceInitialized) {
          console.log('üîÑ AI Intelligence already initialized, skipping...');
          return;
        }
        
        window.aiIntelligenceInitialized = true;
        
        // Local variables within function scope to prevent redeclaration errors
        let pollInterval = null;
        let pollAttempts = 0;
        let hasReceivedRecommendation = false;
        let currentPollDelay = 2000; // Start with 2 seconds for faster streaming
        let renegotiationId = <%= @renegotiation.id %>;
        
        // Track received sections for Turbo Stream disconnect
        let receivedSections = new Set();
        let turboStreamConnection = null;
        const expectedSections = ['recommendation', 'ingredients', 'price_drivers']; // Only 3 working sections

        console.log('üéØ Initializing AI Intelligence for renegotiation', renegotiationId);

        // Turbo Stream monitoring commented out - using pure AJAX polling
        // setupTurboStreamMonitoring();

        // Optimized polling with backoff
        function startPolling() {
          pollInterval = setInterval(() => {
            checkProductIntelligenceStatus(renegotiationId);
          }, currentPollDelay);
        }

        function startProductIntelligence(renegotiationId) {
          console.log('üöÄ Starting OpenAI product intelligence job...');
          
          fetch(`/renegotiations/${renegotiationId}/start_product_intelligence`, {
            method: 'POST',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
              'Content-Type': 'application/json'
            }
          })
          .then(response => {
            if (response.ok) {
              console.log('‚úÖ OpenAI job started successfully');
              return response.json();
            } else {
              throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
          })
          .then(data => {
            console.log('üìä Job response:', data);
            if (data.status === 'processing') {
              console.log('‚è≥ OpenAI job is now running in background...');
            }
          })
          .catch(error => {
            console.error('‚ùå Failed to start OpenAI job:', error);
            showFallbackContent();
          });
        }

        function checkProductIntelligenceStatus(renegotiationId) {
          pollAttempts++;
          
          fetch(`/renegotiations/${renegotiationId}/product_intelligence_status`)
            .then(response => response.json())
            .then(data => {
              if (data.status === 'completed') {
                // Full analysis complete - stop all polling
                if (pollInterval) {
                  clearInterval(pollInterval);
                  pollInterval = null;
                }
                updateUIWithIntelligence(data.data);
              } else if (data.status === 'streaming' && data.partial_data) {
                // NEW: Show recommendation immediately when available
                if (data.partial_data.recommendation && !hasReceivedRecommendation) {
                  document.getElementById('ai-loading').style.display = 'none';
                  document.getElementById('ai-content').style.display = 'block';
                  document.getElementById('ai-recommendation-text').innerText = data.partial_data.recommendation;
                  hasReceivedRecommendation = true;
                  console.log('üì• Recommendation received via streaming!');
                  console.log('üí° Recommendation text:', data.partial_data.recommendation.substring(0, 100) + '...');
                }
                
                // NEW: Show ingredients table immediately when available
                if (data.partial_data.ingredients && document.getElementById('ingredients-loading').style.display !== 'none') {
                  updateIngredientAnalysis(data.partial_data.ingredients);
                  console.log('üì• Ingredients received via streaming!');
                  console.log('üß™ Ingredients count:', data.partial_data.ingredients.length);
                }
                
                // NEW: Show price drivers immediately when available
                if (data.partial_data.price_drivers && document.getElementById('price-drivers-loading').style.display !== 'none') {
                  updatePriceDrivers(data.partial_data.price_drivers);
                  console.log('üì• Price drivers received via streaming!');
                  console.log('üìä Price drivers count:', data.partial_data.price_drivers.length);
                }
                
                // NEW: Show forecast timeline immediately when available
                if (data.partial_data.forecast && document.getElementById('forecast-loading').style.display !== 'none') {
                  updateForecast(data.partial_data.forecast);
                  console.log('üì• Forecast received via streaming!');
                  console.log('üìà Forecast timeline points:', data.partial_data.forecast.length);
                }
                
                // NEW: Show risks immediately when available
                if (data.partial_data.risks && document.getElementById('risks-loading').style.display !== 'none') {
                  updateRiskAssessment(data.partial_data.risks);
                  console.log('üì• Risks received via streaming!');
                  console.log('‚ö†Ô∏è Risk categories:', Object.keys(data.partial_data.risks).length);
                }
                
                // NEW: Show strategies immediately when available
                if (data.partial_data.strategies && document.getElementById('strategies-loading').style.display !== 'none') {
                  updateNegotiationStrategies(data.partial_data.strategies);
                  console.log('üì• Strategies received via streaming!');
                  console.log('üéØ Strategy recommendations:', data.partial_data.strategies.length);
                  
                  // Slow down polling after ALL sections received (including strategies)
                  if (currentPollDelay < 5000) {
                    currentPollDelay = 5000;
                    clearInterval(pollInterval);
                    startPolling();
                  }
                }
                
                // Update any other sections when they become available
                updatePartialIntelligence(data.partial_data);
              } else if (pollAttempts > 3 && !hasReceivedRecommendation) {
                // Implement exponential backoff if no progress
                if (currentPollDelay < 15000) {
                  if (pollInterval) {
                    clearInterval(pollInterval);
                  }
                  currentPollDelay = Math.min(15000, currentPollDelay * 1.5);
                  startPolling();
                }
              }
            })
            .catch(error => {
              console.error('Error checking status:', error);
              // Don't kill polling on network errors, just slow down
              if (pollAttempts > 5) {
                if (pollInterval) {
                  clearInterval(pollInterval);
                  pollInterval = null;
                }
                showFallbackContent();
              }
            });
        }

        function updateUIWithIntelligence(intelligence) {
          // Hide loading
          document.getElementById('ai-loading').style.display = 'none';
          document.getElementById('ai-content').style.display = 'block';

          // Update recommendation text
          const recommendationElement = document.getElementById('ai-recommendation-text');
          if (intelligence.recommendation) {
            recommendationElement.innerText = intelligence.recommendation;
          } else {
            recommendationElement.innerText = 'AI analysis completed successfully.';
          }

          // Update forecast chart if data available
          if (intelligence.forecast) {
            updateForecast(intelligence.forecast);
          }

          // Update other dashboard sections when data is available
          if (intelligence.ingredients) {
            updateIngredientAnalysis(intelligence.ingredients);
          }
          if (intelligence.price_drivers) {
            updatePriceDrivers(intelligence.price_drivers);
          }
          if (intelligence.risks) {
            updateRiskAssessment(intelligence.risks);
          }
          if (intelligence.strategies) {
            updateNegotiationStrategies(intelligence.strategies);
          }
        }

        // Handle partial data updates from streaming
        function updatePartialIntelligence(partialData) {
          // Only update sections that haven't been delivered via Turbo Streams
          // This serves as a fallback mechanism
          
          if (partialData.ingredients && document.getElementById('ingredients-loading').style.display !== 'none') {
            updateIngredientAnalysis(partialData.ingredients);
            receivedSections.add('ingredients');
            console.log('üì• Ingredients received via AJAX polling');
          }
          
          if (partialData.price_drivers && document.getElementById('price-drivers-loading').style.display !== 'none') {
            updatePriceDrivers(partialData.price_drivers);
            receivedSections.add('price_drivers');
            console.log('üì• Price drivers received via AJAX polling');
          }
          
          if (partialData.forecast && !document.getElementById('forecast-bars').children.length) {
            updateForecast(partialData.forecast);
            receivedSections.add('forecast');
            console.log('üì• Forecast received via AJAX polling');
          }
          
          // Note: Using AJAX polling instead of Turbo Streams for better performance
        }

        function showFallbackContent() {
          document.getElementById('ai-loading').style.display = 'none';
          document.getElementById('ai-content').style.display = 'block';
          document.getElementById('ai-recommendation-text').innerText =
            'AI analysis is taking longer than expected. Please refresh the page to see updated insights.';
        }

        // Function to update ingredient analysis table with AI data
        function updateIngredientAnalysis(ingredients) {
          if (!ingredients || !Array.isArray(ingredients)) return;

          // Hide loading spinner and show content
          const loadingElement = document.getElementById('ingredients-loading');
          const contentElement = document.getElementById('ingredients-content');
          const tbody = document.querySelector('.ingredient-analysis tbody');
          
          if (!tbody) return;
          
          loadingElement.style.display = 'none';
          contentElement.style.display = 'block';

        // Clear existing rows
        tbody.innerHTML = '';

        // Add new rows for each ingredient
        ingredients.forEach((ingredient, index) => {
          const row = document.createElement('tr');
          row.style.borderBottom = index === ingredients.length - 1 ? 'none' : '1px solid #1F2937';

          // Determine trend color and arrow
          let trendColor, trendArrow, trendSign;
          if (ingredient.price_trend > 0) {
            trendColor = ingredient.price_trend > 10 ? '#EF4444' : '#FBBF24';
            trendArrow = '‚Üë';
            trendSign = '+';
          } else if (ingredient.price_trend < 0) {
            trendColor = '#10B981';
            trendArrow = '‚Üì';
            trendSign = '';
          } else {
            trendColor = '#6B7280';
            trendArrow = '‚Üí';
            trendSign = '';
          }

          // Determine risk level color
          let riskColor;
          switch (ingredient.risk_level) {
            case 'HIGH': riskColor = '#EF4444'; break;
            case 'MEDIUM': riskColor = '#FBBF24'; break;
            case 'LOW': riskColor = '#10B981'; break;
            default: riskColor = '#6B7280';
          }

          row.innerHTML = `
            <td style="padding: 1rem; color: #E5E4E2; font-weight: 500;">${ingredient.name}</td>
            <td style="text-align: center; padding: 1rem; color: #FF7518; font-weight: 700;">${ingredient.percentage}%</td>
            <td style="padding: 1rem; color: #E5E4E2;">${ingredient.origin}</td>
            <td style="text-align: center; padding: 1rem;">
              <span style="color: ${trendColor}; font-weight: 600;">${trendArrow} ${trendSign}${ingredient.price_trend}%</span>
            </td>
            <td style="text-align: right; padding: 1rem;">
              <span style="background: ${riskColor}; color: white; padding: 0.25rem 0.75rem; border-radius: 0.25rem; font-size: 0.875rem;">${ingredient.risk_level}</span>
            </td>
          `;

          tbody.appendChild(row);
        });
      }

      // Function to update forecast with AI data
      function updateForecast(forecastData) {
        if (!forecastData || !Array.isArray(forecastData)) return;

        const loadingElement = document.getElementById('forecast-loading');
        const chartContainer = document.getElementById('forecast-chart-container');
        const labelsContainer = document.getElementById('forecast-labels');
        const barsContainer = document.getElementById('forecast-bars');
        const summaryElement = document.getElementById('forecast-summary');
        const confidenceElement = document.getElementById('forecast-confidence');

        // Hide loading and show chart
        loadingElement.style.display = 'none';
        chartContainer.style.display = 'block';
        summaryElement.style.display = 'block';

        // Clear existing content
        labelsContainer.innerHTML = '';
        barsContainer.innerHTML = '';

        let totalConfidence = 0;
        let highestChange = 0;

        // Add new labels and bars from AI data
        forecastData.forEach((point, index) => {
          // Add month label
          const label = document.createElement('span');
          label.style.cssText = 'color: #9CA3AF; font-size: 0.75rem;';
          label.textContent = point.month.split(' ')[0]; // Extract month part
          labelsContainer.appendChild(label);

          // Determine color based on price change
          let color = '#6B7280'; // neutral
          if (point.price_change > 0) {
            color = point.price_change > 15 ? '#EF4444' : '#FF7518'; // red for high increases, orange for moderate
          } else if (point.price_change < 0) {
            color = '#10B981'; // green for decreases
          }

          // Calculate bar height (base 50% + scaled change)
          const baseHeight = 50;
          const scaledChange = (point.price_change / 30) * 30; // Scale -30 to +30 to -30% to +30%
          const barHeight = Math.max(10, Math.min(90, baseHeight + scaledChange));

          // Add bar
          const bar = document.createElement('div');
          bar.className = 'forecast-bar';
          bar.style.cssText = `
            flex: 1;
            background: ${color};
            height: ${barHeight}%;
            opacity: 0.8;
            border-radius: 0.25rem 0.25rem 0 0;
            transition: all 0.3s ease;
            position: relative;
          `;
          bar.setAttribute('title', `${point.month}: ${point.price_change > 0 ? '+' : ''}${point.price_change}% (${point.confidence}% confidence)`);
          barsContainer.appendChild(bar);

          // Track metrics
          totalConfidence += point.confidence;
          if (Math.abs(point.price_change) > Math.abs(highestChange)) {
            highestChange = point.price_change;
          }
        });

        // Update confidence summary
        const avgConfidence = Math.round(totalConfidence / forecastData.length);
        const confidenceColor = avgConfidence >= 80 ? '#10B981' : (avgConfidence >= 60 ? '#FBBF24' : '#EF4444');
        confidenceElement.style.color = confidenceColor;
        confidenceElement.textContent = `${avgConfidence}% average confidence`;
      }

      // Function to update price drivers with AI data
      function updatePriceDrivers(priceDrivers) {
        if (!priceDrivers || !Array.isArray(priceDrivers)) return;

        // Hide loading spinner and show content
        const loadingElement = document.getElementById('price-drivers-loading');
        const contentElement = document.getElementById('price-drivers-content');
        const priceDriversList = document.querySelector('.price-drivers-list');
        
        if (!priceDriversList) return;
        
        loadingElement.style.display = 'none';
        contentElement.style.display = 'block';

        // Clear existing items
        priceDriversList.innerHTML = '';

        // Add new price drivers
        priceDrivers.forEach((driver, index) => {
          const listItem = document.createElement('li');
          listItem.style.cssText = `padding: 0.5rem 0; ${index === priceDrivers.length - 1 ? '' : 'border-bottom: 1px solid #1F2937;'}`;

          // Determine color based on level
          let color;
          switch (driver.level.toLowerCase()) {
            case 'high': color = '#EF4444'; break;
            case 'low': color = '#10B981'; break;
            default: color = '#FBBF24';
          }

          listItem.innerHTML = `
            <span style="color: ${color};">${driver.icon}</span>
            <span style="color: #E5E4E2; margin-left: 0.5rem;">${driver.description}</span>
          `;

          priceDriversList.appendChild(listItem);
        });
        }

        // Function to update risk assessment with AI data
        function updateRiskAssessment(risksData) {
          if (!risksData) return;

          const loadingElement = document.getElementById('risks-loading');
          const gridElement = document.getElementById('risk-grid');

          // Hide loading and show grid
          loadingElement.style.display = 'none';
          gridElement.style.display = 'grid';

          // Update Geopolitical risks
          if (risksData.geopolitical) {
            const geopoliticalList = document.getElementById('geopolitical-list');
            geopoliticalList.innerHTML = '';
            risksData.geopolitical.forEach(risk => {
              const listItem = document.createElement('li');
              listItem.style.cssText = 'padding: 0.375rem 0;';
              listItem.textContent = `‚Ä¢ ${risk.description}`;
              geopoliticalList.appendChild(listItem);
            });
          }

          // Update Product-Specific risks
          if (risksData.product_specific) {
            const productSpecificList = document.getElementById('product-specific-list');
            productSpecificList.innerHTML = '';
            risksData.product_specific.forEach(risk => {
              const listItem = document.createElement('li');
              listItem.style.cssText = 'padding: 0.375rem 0;';
              listItem.textContent = `‚Ä¢ ${risk.description}`;
              productSpecificList.appendChild(listItem);
            });
          }

          // Update Supply Chain risks
          if (risksData.supply_chain) {
            const supplyChainList = document.getElementById('supply-chain-list');
            supplyChainList.innerHTML = '';
            risksData.supply_chain.forEach(risk => {
              const listItem = document.createElement('li');
              listItem.style.cssText = 'padding: 0.375rem 0;';
              listItem.textContent = `‚Ä¢ ${risk.description}`;
              supplyChainList.appendChild(listItem);
            });
          }
        }

        // Function to update negotiation strategies with AI data
        function updateNegotiationStrategies(strategiesData) {
          if (!strategiesData || !Array.isArray(strategiesData)) return;

          const loadingElement = document.getElementById('strategies-loading');
          const contentElement = document.getElementById('strategies-content');
          const strategiesList = document.getElementById('strategies-list');
          const strategiesTip = document.getElementById('strategies-tip');

          // Hide loading and show content
          loadingElement.style.display = 'none';
          contentElement.style.display = 'block';

          // Clear existing strategies
          strategiesList.innerHTML = '';

          // Add new strategies
          strategiesData.forEach((strategy, index) => {
            const listItem = document.createElement('li');
            listItem.style.cssText = 'margin-bottom: 0.75rem;';
            
            // Priority color
            const priorityColor = strategy.priority === 'high' ? '#EF4444' : 
                                (strategy.priority === 'low' ? '#10B981' : '#FBBF24');
            
            listItem.innerHTML = `
              <strong style="color: ${priorityColor};">${strategy.title}</strong> 
              <span style="font-size: 0.75rem; color: #9CA3AF;">(${strategy.timeframe})</span>
              - ${strategy.description}
            `;
            strategiesList.appendChild(listItem);
          });

          // Update tip with AI insight
          const highPriorityStrategies = strategiesData.filter(s => s.priority === 'high');
          if (highPriorityStrategies.length > 0) {
            strategiesTip.textContent = `üí° Priority focus: ${highPriorityStrategies[0].title} - act ${highPriorityStrategies[0].timeframe}ly for best results.`;
          }
        }

        // Start the background job
        startProductIntelligence(renegotiationId);

        // Start initial polling
        startPolling();

        // Timeout after 45 seconds - extended for better reliability
        setTimeout(() => {
          if (pollInterval) {
            clearInterval(pollInterval);
            pollInterval = null;
          }
          // Only show fallback if AI content is still hidden
          if (document.getElementById('ai-content').style.display === 'none') {
            showFallbackContent();
          }
        }, 45000);

        // Clean up polling when user leaves page
        window.addEventListener('beforeunload', function() {
          if (pollInterval) {
            clearInterval(pollInterval);
            pollInterval = null;
          }
        });
      }

      // Turbo Stream monitoring and disconnect functions - COMMENTED OUT
      // Using pure AJAX polling instead for better performance and reliability
      /*
      function setupTurboStreamMonitoring() {
        // Monitor for recommendation updates via Turbo Stream
        document.addEventListener('turbo:before-stream-render', function(event) {
          // Check if this is our AI recommendation stream
          if (event.detail.streamElement.getAttribute('action') === 'update' && 
              event.detail.streamElement.getAttribute('target') === 'ai-content') {
            receivedSections.add('recommendation');
            hasReceivedRecommendation = true;
            console.log('üì• AI Recommendation received via Turbo Stream');
            checkForCompleteSections();
          }
        });

        // Also monitor the DOM for section updates (fallback detection)
        setTimeout(() => {
          const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
              if (mutation.target.id === 'ai-content' || 
                  mutation.target.closest('.ingredient-analysis') ||
                  mutation.target.closest('.price-drivers-list')) {
                detectCompletedSections();
              }
            });
          });
          
          observer.observe(document.body, {
            childList: true,
            subtree: true,
            attributes: true
          });
        }, 1000);
      }

      function detectCompletedSections() {
        // Check if sections have been populated
        if (document.getElementById('ai-content').style.display !== 'none') {
          receivedSections.add('recommendation');
        }
        
        if (document.querySelector('.ingredient-analysis tbody tr')) {
          receivedSections.add('ingredients');
        }
        
        if (document.querySelector('.price-drivers-list li')) {
          receivedSections.add('price_drivers');
        }
        
        checkForCompleteSections();
      }

      function checkForCompleteSections() {
        console.log(`üìä Sections received: ${Array.from(receivedSections).join(', ')}`);
        
        // Check if we have all 3 expected sections
        if (expectedSections.every(section => receivedSections.has(section))) {
          console.log('‚úÖ All expected sections received, disconnecting Turbo Stream');
          disconnectTurboStream();
          
          // Also stop polling since we have everything we need
          if (pollInterval) {
            clearInterval(pollInterval);
            pollInterval = null;
            console.log('‚úÖ Stopped polling - all sections complete');
          }
        }
      }

      function disconnectTurboStream() {
        try {
          // Find and disconnect the specific Turbo Stream subscription
          const streamElement = document.querySelector(`turbo-cable-stream-source[channel="Turbo::StreamsChannel"][signed-stream-name*="ai_recommendation_${renegotiationId}"]`);
          if (streamElement) {
            streamElement.remove();
            console.log('üîå Turbo Stream disconnected for AI recommendation');
          }
        } catch (error) {
          console.log('‚ö†Ô∏è Turbo Stream disconnect error (not critical):', error);
        }
      }
      */
    </script>
  </div>

  <!-- Key Metrics Row -->
  <div class="metrics-row" style="display: grid; grid-template-columns: repeat(6, 1fr); gap: 1.5rem; margin-bottom: 2rem;">

    <div class="metric-card" style="text-align: center; background: #0A0F2E; padding: 1rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
      <div style="font-size: 1.75rem; font-weight: 700; color: #FF7518; margin-bottom: 0.5rem;">‚Ç¨<%= suggestion[:min_price] || 780 %></div>
      <div style="font-size: 0.875rem; color: #9CA3AF;">Min Price</div>
    </div>

    <div class="metric-card" style="text-align: center; background: #0A0F2E; padding: 1rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
      <div style="font-size: 1.75rem; font-weight: 700; color: #FF7518; margin-bottom: 0.5rem;">‚Ç¨<%= suggestion[:target_price] || 850 %></div>
      <div style="font-size: 0.875rem; color: #9CA3AF;">Target Price</div>
    </div>

    <div class="metric-card" style="text-align: center; background: #0A0F2E; padding: 1rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
      <div style="font-size: 1.75rem; font-weight: 700; color: #FF7518; margin-bottom: 0.5rem;">‚Ç¨23.4K</div>
      <div style="font-size: 0.875rem; color: #9CA3AF;">Volume</div>
    </div>

    <div class="metric-card" style="text-align: center; background: #0A0F2E; padding: 1rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
      <div style="font-size: 1.75rem; font-weight: 700; color: #10B981; margin-bottom: 0.5rem;">85%</div>
      <div style="font-size: 0.875rem; color: #9CA3AF;">Confidence</div>
    </div>

    <div class="metric-card" style="text-align: center; background: #0A0F2E; padding: 1rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
      <div style="font-size: 1.75rem; font-weight: 700; color: #10B981; margin-bottom: 0.5rem;">7.2%</div>
      <div style="font-size: 0.875rem; color: #9CA3AF;">Savings</div>
    </div>

    <div class="metric-card" style="text-align: center; background: #0A0F2E; padding: 1rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
      <div style="font-size: 1.75rem; font-weight: 700; color: #FBBF24; margin-bottom: 0.5rem;">4.5‚òÖ</div>
      <div style="font-size: 0.875rem; color: #9CA3AF;">Rating</div>
    </div>

  </div>

  <!-- Charts and Analysis Row - COMMENTED OUT -->
  <%#
  <div class="analysis-row" style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-bottom: 2rem;">

    <!-- Price Trend Chart -->
    <div class="chart-section" style="background: #0A0F2E; padding: 1.5rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
      <h4 style="color: #E5E4E2; margin: 0 0 1rem 0; font-size: 1rem; font-weight: 600;">üìä Price Trend (6 months)</h4>
      <div class="trend-chart" style="position: relative; height: 60px; background: #131B3F; border-radius: 0.25rem; padding: 0.5rem; margin-bottom: 1rem;">
        <!-- Simple CSS chart bars -->
        <div style="display: flex; align-items: end; height: 100%; gap: 2px;">
          <div style="background: #FF7518; width: 8px; height: 40%; border-radius: 2px 2px 0 0;"></div>
          <div style="background: #FF7518; width: 8px; height: 55%; border-radius: 2px 2px 0 0;"></div>
          <div style="background: #FF7518; width: 8px; height: 35%; border-radius: 2px 2px 0 0;"></div>
          <div style="background: #FF7518; width: 8px; height: 70%; border-radius: 2px 2px 0 0;"></div>
          <div style="background: #FF7518; width: 8px; height: 45%; border-radius: 2px 2px 0 0;"></div>
          <div style="background: #10B981; width: 8px; height: 85%; border-radius: 2px 2px 0 0;"></div>
        </div>
      </div>
      <div style="color: #10B981; font-size: 0.875rem; font-weight: 500;">
        ‚ÜóÔ∏è Trending upward (+12% this month)
      </div>
    </div>

    <!-- Market Position -->
    <div class="chart-section" style="background: #0A0F2E; padding: 1.5rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
      <h4 style="color: #E5E4E2; margin: 0 0 1rem 0; font-size: 1rem; font-weight: 600;">üìà Market Position</h4>
      <div class="position-bar" style="background: #131B3F; height: 20px; border-radius: 10px; position: relative; margin-bottom: 1rem;">
        <div style="background: linear-gradient(90deg, #10B981 0%, #FF7518 73%, #EF4444 100%); height: 100%; border-radius: 10px; width: 73%;"></div>
        <div style="position: absolute; top: -2px; left: 73%; width: 4px; height: 24px; background: #E5E4E2; border-radius: 2px;"></div>
      </div>
      <div style="color: #FF7518; font-size: 0.875rem; font-weight: 500;">
        73rd percentile - Competitive position
      </div>
    </div>

  </div>

  <!-- Supplier & Risk Analysis -->
  <div class="details-row" style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-bottom: 2rem;">

    <!-- Supplier Analysis -->
    <div class="analysis-section" style="background: #0A0F2E; padding: 1.5rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
      <h4 style="color: #E5E4E2; margin: 0 0 1rem 0; font-size: 1rem; font-weight: 600;">üè≠ Supplier Analysis</h4>
      <div style="space-y: 0.75rem;">
        <div style="display: flex; justify-content: space-between; margin-bottom: 0.75rem;">
          <span style="color: #9CA3AF;">Response Time:</span>
          <span style="color: #10B981; font-weight: 500;">2.3 days</span>
        </div>
        <div style="display: flex; justify-content: space-between; margin-bottom: 0.75rem;">
          <span style="color: #9CA3AF;">Flexibility:</span>
          <span style="color: #10B981; font-weight: 500;">HIGH</span>
        </div>
        <div style="display: flex; justify-content: space-between; margin-bottom: 0.75rem;">
          <span style="color: #9CA3AF;">Volume Discount:</span>
          <span style="color: #FF7518; font-weight: 500;">5.2%</span>
        </div>
        <div style="display: flex; justify-content: space-between;">
          <span style="color: #9CA3AF;">Reliability Score:</span>
          <span style="color: #FBBF24; font-weight: 500;">8.7/10</span>
        </div>
      </div>
    </div>

    <!-- Risk Assessment -->
    <div class="analysis-section" style="background: #0A0F2E; padding: 1.5rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
      <h4 style="color: #E5E4E2; margin: 0 0 1rem 0; font-size: 1rem; font-weight: 600;">üìã Risk Assessment</h4>
      <div style="space-y: 0.75rem;">
        <div style="display: flex; justify-content: space-between; margin-bottom: 0.75rem;">
          <span style="color: #9CA3AF;">Market Risk:</span>
          <span style="color: #10B981; font-weight: 500;">LOW</span>
        </div>
        <div style="display: flex; justify-content: space-between; margin-bottom: 0.75rem;">
          <span style="color: #9CA3AF;">Supply Risk:</span>
          <span style="color: #FBBF24; font-weight: 500;">MEDIUM</span>
        </div>
        <div style="display: flex; justify-content: space-between; margin-bottom: 0.75rem;">
          <span style="color: #9CA3AF;">Price Volatility:</span>
          <span style="color: #FF7518; font-weight: 500;">12%</span>
        </div>
        <div style="display: flex; justify-content: space-between;">
          <span style="color: #9CA3AF;">Contract Risk:</span>
          <span style="color: #10B981; font-weight: 500;">LOW</span>
        </div>
      </div>
    </div>

  </div>
  %>

</section>

<!-- NEW PRODUCT INTELLIGENCE SECTIONS -->

<!-- Product Overview Section - COMMENTED OUT
<section class="product-overview" style="background: #131B3F; border-radius: 0.5rem; padding: 2rem; color: #E5E4E2; margin-top: 2rem;">
  <header style="margin-bottom: 2rem; border-bottom: 2px solid #FF7518; padding-bottom: 1rem;">
    <h2 style="color: #E5E4E2; margin: 0; font-size: 1.5rem; font-weight: 700;">
      üì¶ Product Analysis
    </h2>
  </header>

  <div style="background: #0A0F2E; padding: 1.5rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
    <h3 style="color: #FF7518; margin: 0 0 1rem 0; font-size: 1.25rem; font-weight: 600;">
      <%= @renegotiation.product.name %>

    </h3>
    <p style="color: #E5E4E2; margin: 0 0 1rem 0; line-height: 1.6;">
      <strong>Description:</strong> <%= @renegotiation.product.description || "No description available" %>
    </p>
    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; margin-top: 1.5rem;">
      <div>
        <span style="color: #9CA3AF; font-size: 0.875rem;">Category</span>
        <p style="color: #E5E4E2; margin: 0.25rem 0 0 0; font-weight: 600;"><%= @renegotiation.product.category %></p>
      </div>
      <div>
        <span style="color: #9CA3AF; font-size: 0.875rem;">Current Price</span>
        <p style="color: #FF7518; margin: 0.25rem 0 0 0; font-weight: 600;">‚Ç¨<%= @renegotiation.product.current_price %></p>
      </div>
      <div>
        <span style="color: #9CA3AF; font-size: 0.875rem;">Supplier</span>
        <p style="color: #E5E4E2; margin: 0.25rem 0 0 0; font-weight: 600;"><%= @renegotiation.product.supplier.company_name %></p>
      </div>
    </div>
  </div>
</section>
-->


<!-- Ingredient Composition Analysis -->
<section class="ingredient-analysis" style="background: #131B3F; border-radius: 0.5rem; padding: 2rem; color: #E5E4E2; margin-top: 2rem;">
  <header style="margin-bottom: 2rem; border-bottom: 2px solid #FF7518; padding-bottom: 1rem;">
    <h2 style="color: #E5E4E2; margin: 0; font-size: 1.5rem; font-weight: 700;">
      üß™ Top 5 Ingredient Analysis
    </h2>
  </header>

  <!-- Loading State for Ingredients -->
  <div id="ingredients-loading" style="display: block; text-align: center; padding: 2rem; color: #9CA3AF;">
    <div class="spinner-border spinner-border-sm text-warning me-2" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    Analyzing ingredient composition...
  </div>

  <div id="ingredients-content" style="display: none; background: #0A0F2E; padding: 1.5rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
    <table style="width: 100%; border-collapse: collapse;">
      <thead>
        <tr style="border-bottom: 2px solid #1F2937;">
          <th style="text-align: left; padding: 0.75rem; color: #9CA3AF; font-weight: 600;">Ingredient</th>
          <th style="text-align: center; padding: 0.75rem; color: #9CA3AF; font-weight: 600;">%</th>
          <th style="text-align: left; padding: 0.75rem; color: #9CA3AF; font-weight: 600;">Origin</th>
          <th style="text-align: center; padding: 0.75rem; color: #9CA3AF; font-weight: 600;">Price Trend</th>
          <th style="text-align: right; padding: 0.75rem; color: #9CA3AF; font-weight: 600;">Risk Level</th>
        </tr>
      </thead>
      <tbody>
        <% if suggestion[:ingredients].present? %>
          <% suggestion[:ingredients].each_with_index do |ingredient, index| %>
            <tr style="border-bottom: <%= index == suggestion[:ingredients].size - 1 ? 'none' : '1px solid #1F2937' %>;">
              <td style="padding: 1rem; color: #E5E4E2; font-weight: 500;"><%= ingredient[:name] %></td>
              <td style="text-align: center; padding: 1rem; color: #FF7518; font-weight: 700;"><%= ingredient[:percentage] %>%</td>
              <td style="padding: 1rem; color: #E5E4E2;"><%= ingredient[:origin] %></td>
              <td style="text-align: center; padding: 1rem;">
                <%
                  # Determine trend color and arrow
                  if ingredient[:price_trend] > 0
                    trend_color = ingredient[:price_trend] > 10 ? '#EF4444' : '#FBBF24'
                    trend_arrow = '‚Üë'
                    trend_sign = '+'
                  elsif ingredient[:price_trend] < 0
                    trend_color = '#10B981'
                    trend_arrow = '‚Üì'
                    trend_sign = ''
                  else
                    trend_color = '#6B7280'
                    trend_arrow = '‚Üí'
                    trend_sign = ''
                  end
                %>
                <span style="color: <%= trend_color %>; font-weight: 600;"><%= trend_arrow %> <%= trend_sign %><%= ingredient[:price_trend] %>%</span>
              </td>
              <td style="text-align: right; padding: 1rem;">
                <%
                  # Determine risk level color
                  risk_color = case ingredient[:risk_level]
                  when 'HIGH' then '#EF4444'
                  when 'MEDIUM' then '#FBBF24'
                  when 'LOW' then '#10B981'
                  else '#6B7280'
                  end
                %>
                <span style="background: <%= risk_color %>; color: white; padding: 0.25rem 0.75rem; border-radius: 0.25rem; font-size: 0.875rem;"><%= ingredient[:risk_level] %></span>
              </td>
            </tr>
          <% end %>
        <% else %>
          <tr>
            <td colspan="5" style="text-align: center; padding: 2rem; color: #9CA3AF;">
              Ingredient analysis not available at this time.
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
</section>

<!-- 6-Month Price Forecast -->
<section class="price-forecast" style="background: #131B3F; border-radius: 0.5rem; padding: 2rem; color: #E5E4E2; margin-top: 2rem;">
  <header style="margin-bottom: 2rem; border-bottom: 2px solid #FF7518; padding-bottom: 1rem;">
    <h2 style="color: #E5E4E2; margin: 0; font-size: 1.5rem; font-weight: 700;">
      üìà 6-Month Ingredient Price Forecast
    </h2>
  </header>

  <div class="forecast-grid" style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem;">
    <!-- Forecast Chart - AI Powered -->
    <div style="background: #0A0F2E; padding: 1.5rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
      <h4 style="color: #E5E4E2; margin: 0 0 1rem 0;" id="forecast-title">6-Month Price Forecast</h4>
      
      <!-- Loading State for Forecast -->
      <div id="forecast-loading" style="display: block; text-align: center; padding: 2rem; color: #9CA3AF;">
        <div class="spinner-border spinner-border-sm text-warning me-2" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        Generating price forecast timeline...
      </div>
      
      <!-- Dynamic chart container -->
      <div id="forecast-chart-container" style="display: none; position: relative; height: 200px; border-left: 2px solid #1F2937; border-bottom: 2px solid #1F2937; padding: 1rem;">
        <!-- Month labels - dynamically populated -->
        <div id="forecast-labels" style="position: absolute; bottom: 0; left: 0; right: 0; display: flex; justify-content: space-between; padding-top: 0.5rem;">
          <!-- Will be populated by AI data -->
        </div>
        <!-- Forecast bars - dynamically generated -->
        <div id="forecast-bars" style="position: absolute; bottom: 2rem; left: 0; right: 0; height: 150px; display: flex; align-items: flex-end; gap: 0.5rem;">
          <!-- Will be populated by AI data -->
        </div>
      </div>
      <p id="forecast-summary" style="display: none; color: #9CA3AF; font-size: 0.875rem; margin-top: 1rem;">
        AI Confidence: <span id="forecast-confidence" style="color: #10B981; font-weight: 600;">Loading...</span>
      </p>
    </div>

    <!-- Forecast Summary -->
    <!-- Loading State for Price Drivers -->
    <div id="price-drivers-loading" style="display: block; text-align: center; padding: 2rem; color: #9CA3AF;">
      <div class="spinner-border spinner-border-sm text-warning me-2" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      Identifying key price drivers...
    </div>

    <div id="price-drivers-content" style="display: none; background: #0A0F2E; padding: 1.5rem; border-radius: 0.375rem; border: 1px solid #1F2937;">
      <h4 style="color: #E5E4E2; margin: 0 0 1rem 0;">Key Price Drivers</h4>
      <ul style="list-style: none; padding: 0; margin: 0;" class="price-drivers-list">
        <% if suggestion[:price_drivers].present? %>
          <% suggestion[:price_drivers].each_with_index do |driver, index| %>
            <li style="padding: 0.5rem 0; <%= index == suggestion[:price_drivers].size - 1 ? '' : 'border-bottom: 1px solid #1F2937;' %>">
              <span style="color: <%= driver[:level] == 'high' ? '#EF4444' : (driver[:level] == 'low' ? '#10B981' : '#FBBF24') %>;">
                <%= driver[:icon] %>
              </span>
              <span style="color: #E5E4E2; margin-left: 0.5rem;"><%= driver[:description] %></span>
            </li>
          <% end %>
        <% else %>
          <li style="padding: 1rem 0; text-align: center; color: #9CA3AF;">
            Price driver analysis not available at this time.
          </li>
        <% end %>
      </ul>
    </div>
  </div>
</section>

<!-- Risk Intelligence Dashboard -->
<section class="risk-intelligence" style="background: #131B3F; border-radius: 0.5rem; padding: 2rem; color: #E5E4E2; margin-top: 2rem;">
  <header style="margin-bottom: 2rem; border-bottom: 2px solid #FF7518; padding-bottom: 1rem;">
    <h2 style="color: #E5E4E2; margin: 0; font-size: 1.5rem; font-weight: 700;">
      ‚ö†Ô∏è Risk Intelligence Dashboard
    </h2>
  </header>

  <!-- Loading State for Risks -->
  <div id="risks-loading" style="display: block; text-align: center; padding: 2rem; color: #9CA3AF;">
    <div class="spinner-border spinner-border-sm text-warning me-2" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    Analyzing procurement risks...
  </div>

  <div class="risk-grid" id="risk-grid" style="display: none; grid-template-columns: repeat(3, 1fr); gap: 1.5rem;">
    <!-- Geopolitical Risks - Dynamic -->
    <div id="geopolitical-risks" style="background: #0A0F2E; padding: 1.5rem; border-radius: 0.375rem; border: 1px solid #1F2937; border-top: 4px solid #EF4444;">
      <h4 style="color: #E5E4E2; margin: 0 0 1rem 0; display: flex; align-items: center;">
        <span id="geopolitical-level" style="background: #EF4444; color: white; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.875rem; margin-right: 0.5rem;">HIGH</span>
        Geopolitical
      </h4>
      <ul id="geopolitical-list" style="list-style: none; padding: 0; margin: 0; color: #E5E4E2; font-size: 0.875rem;">
        <!-- Will be populated by AI -->
      </ul>
    </div>

    <!-- Product-Specific Risks - Dynamic -->
    <div id="product-specific-risks" style="background: #0A0F2E; padding: 1.5rem; border-radius: 0.375rem; border: 1px solid #1F2937; border-top: 4px solid #FBBF24;">
      <h4 style="color: #E5E4E2; margin: 0 0 1rem 0; display: flex; align-items: center;">
        <span id="product-specific-level" style="background: #FBBF24; color: white; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.875rem; margin-right: 0.5rem;">MEDIUM</span>
        Product-Specific
      </h4>
      <ul id="product-specific-list" style="list-style: none; padding: 0; margin: 0; color: #E5E4E2; font-size: 0.875rem;">
        <!-- Will be populated by AI -->
      </ul>
    </div>

    <!-- Supply Chain Risks - Dynamic -->
    <div id="supply-chain-risks" style="background: #0A0F2E; padding: 1.5rem; border-radius: 0.375rem; border: 1px solid #1F2937; border-top: 4px solid #10B981;">
      <h4 style="color: #E5E4E2; margin: 0 0 1rem 0; display: flex; align-items: center;">
        <span id="supply-chain-level" style="background: #10B981; color: white; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.875rem; margin-right: 0.5rem;">LOW</span>
        Supply Chain
      </h4>
      <ul id="supply-chain-list" style="list-style: none; padding: 0; margin: 0; color: #E5E4E2; font-size: 0.875rem;">
        <!-- Will be populated by AI -->
      </ul>
    </div>
  </div>
</section>

<!-- Negotiation Strategy Recommendations -->
<section class="market-intelligence-summary" style="background: #131B3F; border-radius: 0.5rem; padding: 2rem; color: #E5E4E2; margin-top: 2rem; margin-bottom: 2rem;">
  <header style="margin-bottom: 2rem; border-bottom: 2px solid #FF7518; padding-bottom: 1rem;">
    <h2 style="color: #E5E4E2; margin: 0; font-size: 1.5rem; font-weight: 700;">
      üéØ Negotiation Strategy Recommendations
    </h2>
  </header>

  <!-- Loading State for Strategies -->
  <div id="strategies-loading" style="display: block; text-align: center; padding: 2rem; color: #9CA3AF;">
    <div class="spinner-border spinner-border-sm text-warning me-2" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    Generating negotiation strategies...
  </div>

  <div id="strategies-content" style="display: none; background: #0A0F2E; padding: 1.5rem; border-radius: 0.375rem; border: 1px solid #FF7518; border-left: 4px solid #FF7518;">
    <h4 style="color: #FF7518; margin: 0 0 1rem 0;">AI-Powered Strategy Recommendations:</h4>
    <ol id="strategies-list" style="color: #E5E4E2; line-height: 1.8; padding-left: 1.5rem;">
      <!-- Will be populated by AI -->
    </ol>

    <div id="strategies-summary" style="margin-top: 1.5rem; padding-top: 1.5rem; border-top: 1px solid #1F2937;">
      <p style="color: #9CA3AF; font-size: 0.875rem; margin: 0;">
        <em id="strategies-tip">üí° Strategic insights will appear here based on AI analysis...</em>
      </p>
    </div>
  </div>
</section>
